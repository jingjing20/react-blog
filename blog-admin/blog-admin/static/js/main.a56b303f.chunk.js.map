{"version":3,"sources":["Pages/Login.js","Pages/AddArticle.js","Pages/ArticleList.js","Pages/AdminIndex.js","Pages/Main.js","index.js"],"names":["Login","Select","Option","Input","TextArea","AddArticle","Modal","confirm","Layout","Content","Footer","Sider","Menu","SubMenu","Main","ReactDOM","render","document","getElementById"],"mappings":"oXAkGeA,I,+FCzFIC,IAAXC,OACaC,IAAbC,SAoROC,I,uBCzRKC,IAAZC,QCQ2BC,IAA3BC,QAA2BD,IAAlBE,OAAkBF,IAAVG,MACLC,IAAZC,QCWOC,MAnBf,aCFAC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a56b303f.chunk.js","sourcesContent":["import React, { useState } from 'react'; //因为有username和password改变，所以需要useState（hooks）\r\nimport 'antd/dist/antd.css' //antd的样式\r\nimport { Card, Input, Button, Spin, message } from 'antd';\r\n// Spin就是提交后，不能再点，一个loading状态\r\nimport { UserOutlined, KeyOutlined } from '@ant-design/icons'; //antd的组件\r\nimport '../static/css/Login.css';\r\nimport servicePath from '../config/apiUrl';\r\nimport axios from 'axios'; // 用这个进行远端接口的访问\r\n\r\nfunction Login(props) {\r\n    // 用户名，是否在加载状态 useState要求一个初始值，我们把他们全部设为空\r\n    const [userName, setUserName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false) //点击了按钮变动值\r\n\r\n    const checkLogin = () => {\r\n        //还没有中台，先试试Spin,让它点击后不能再点击，loading状态，一秒后返回回来\r\n        setIsLoading(true)\r\n        if (!userName) {\r\n            message.error('用户名不能为空');\r\n            setTimeout(() => {\r\n                setIsLoading(false)\r\n            }, 500)\r\n            return false; //防止他往下运行，就是不去服务端进行访问了\r\n        } else if (!password) {\r\n            message.error('密码不能为空');\r\n            setTimeout(() => {\r\n                setIsLoading(false)\r\n            }, 500)\r\n            return false; //防止他往下运行\r\n        }\r\n        // 然后可以传递参数到后端进行判断，调用中台接口\r\n        // 以对象的形式传给后台\r\n        let dataProps = {\r\n            'userName': userName,\r\n            'password': password\r\n        }\r\n        // console.log(dataProps)\r\n        axios({\r\n            method: 'post',\r\n            url: servicePath.checkLogin,\r\n            data: dataProps, //传的的参数\r\n            withCredentials: true,//前后端共享session\r\n\r\n        }).then(\r\n            res => {\r\n                // console.log(res.data.data);\r\n                // 把放重复提交先放这里\r\n                setIsLoading(false) //撤掉，让它能提交\r\n                if (res.data.data === '登录成功') { //我们自己写的data\r\n                    // 把返回的openId缓存起来\r\n                    localStorage.setItem('openId', res.data.openId) //是H5的自带的，也是key-value形式\r\n                    // 然后跳转\r\n                    props.history.push('/index') //??\r\n                    //要在组件的函数中传递props先\r\n                    // 因为我们要跳转，用编程导航的形式跳转，所以需要用到这个props\r\n                } else {\r\n                    message.error('用户名密码错误')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-div\">\r\n            {/* tip就是在旋转的时候出现什么字 \r\n                spinning是它的状态\r\n                onChange就是发生改变的时候有什么动作，放input中就是只要输入改变了，就用setUserName改变值*/}\r\n            <Spin tip=\"Loading...\" spinning={isLoading}>\r\n                <Card title=\"jingjing Blog System\" bordered={true} style={{ width: 400 }}>\r\n                    {/* prefix加个前缀 图标 */}\r\n                    <Input\r\n                        id=\"username\"\r\n                        size=\"large\"\r\n                        placeholder=\"Enter your username\"\r\n                        prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                        onChange={(e) => { setUserName(e.target.value) }} //e就是我们的文本框本身，我们通过e来得到目标的值\r\n                    ></Input>\r\n                    {/* 放两个br一个表示换行，没有空格，连个br就是空出一行 */}\r\n                    <br /><br />\r\n                    <Input.Password\r\n                        id=\"password\"\r\n                        size=\"large\"\r\n                        placeholder=\"Enter your password\"\r\n                        prefix={<KeyOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                        onChange={(e) => { setPassword(e.target.value) }} //e就是我们的文本框本身，我们通过e来得到目标的值\r\n                    ></Input.Password>\r\n                    {/* 放两个br一个表示换行，没有空格，连个br就是空出一行 */}\r\n                    <br /><br />\r\n                    {/* block说明他是一个块级元素 */}\r\n                    <Button type=\"primary\" size=\"large\" block onClick={checkLogin}>Login in</Button>\r\n                </Card>\r\n            </Spin>\r\n        </div>\r\n    )\r\n}\r\n\r\n//一定记得，所有的组件最后都要暴露出去\r\nexport default Login;","import React, { useState, useEffect } from 'react';\r\nimport marked from 'marked' //要安装一下 //处理markdown的\r\n// 还要使用一个css样式\r\nimport '../static/css/AddArticle.css'\r\n// 使用antd中想要的组件\r\n//因为是表单，所以肯定有input,还有对类别进行选择的组件Select,提交按钮,日期选择\r\nimport { Row, Col, Input, Select, Button, DatePicker, message } from 'antd'\r\nimport axios from 'axios' //引入后台获得数据的方法\r\nimport servicePath from '../config/apiUrl'\r\nconst { Option } = Select // 下拉列表中的每一项，这个需要解析出来\r\nconst { TextArea } = Input // 多行文本框，这个是在Input里面的，所以注意引入的方式\r\n\r\n\r\nfunction AddArticle(props) {\r\n    const [articleId, setArticleId] = useState(0)  // 文章的ID，如果是0说明是新增加，如果不是0，说明是修改\r\n    const [articleTitle, setArticleTitle] = useState('')   //文章标题\r\n    const [articleContent, setArticleContent] = useState('')  //markdown的编辑内容\r\n    const [markdownContent, setMarkdownContent] = useState('预览内容') //html内容\r\n    const [introducemd, setIntroducemd] = useState()            //简介的markdown内容\r\n    const [introducehtml, setIntroducehtml] = useState('等待编辑') //简介的html内容\r\n    const [showDate, setShowDate] = useState()   //发布日期\r\n    const [typeInfo, setTypeInfo] = useState([]) // 文章类别信息//这里会从后台读出所有文章分类\r\n    const [selectedType, setSelectType] = useState('请选择类型') //选择的文章类别\r\n\r\n    //使用获取文章列表信息\r\n    //他也是一个方法，接受一个匿名函数,第二个参数是数组空的意思是只执行一次，就是一进来页面的时候\r\n    useEffect(() => {\r\n        getTypeInfo()\r\n        //获取文章id\r\n        let tmpId = props.match.params.id\r\n        if (tmpId) {\r\n            setArticleId(tmpId)\r\n            getArticleById(tmpId)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    // 设置marked\r\n    const renderer = new marked.Renderer()\r\n    marked.setOptions({\r\n        renderer: renderer, //后面的是我们的new的实例\r\n        gfm: true,\r\n        pedantic: false,\r\n        sanitize: false,//原始输出，忽略html\r\n        breaks: false,//不使用github的换行符\r\n        smartLists: true,\r\n        smartypants: false//使用更为时髦的标点，比如在引用语法中加入破折号。\r\n    })\r\n    // 变化的时候，右边的预览也要跟着变，一个change方法\r\n    // 传一个e,因为要接受多行文本框中的e\r\n    const changeContent = (e) => {\r\n        // 怎么获得值呢？然后赋给左边的setArticleContent\r\n        setArticleContent(e.target.value);\r\n        // 然后把获得的值用marked转换一下 //？？我们后台保存的值是articleContent,不是转换的值\r\n        let html = marked(e.target.value);//转换成html\r\n        setMarkdownContent(html); //把转换后的赋值给右边预览\r\n    }\r\n    // 文章简介的预览实现\r\n    const changeIntroduce = (e) => {\r\n        setIntroducemd(e.target.value);\r\n        let html = marked(e.target.value);\r\n        setIntroducehtml(html);\r\n    }\r\n    //获得文章类别信息的方法\r\n    const getTypeInfo = () => {\r\n        // 获取远端数据\r\n        axios({\r\n            method: 'get',\r\n            url: servicePath.getTypeInfo,\r\n            withCredentials: true, //如果要使用跨域cookie就要加这个，因为我们的中间件就是要检验cookie,所以要加这个\r\n        }).then(\r\n            res => {\r\n                if (res.data.data === '没有登录') { //这是后台返回的 中间件路由守卫那里返回的\r\n                    localStorage.removeItem('openId') //没有登录，删除存储信息\r\n                    props.history.push('/') //然后要跳转，需要props\r\n                } else {\r\n                    setTypeInfo(res.data.data) //登录成功，要为文章类型设置值\r\n                }\r\n            }\r\n        )\r\n    }\r\n    // 改变Select\r\n    const selectTypeHandler = (value) => {\r\n        setSelectType(value)\r\n    }\r\n    // 保存文章的时候执行的方法，检验\r\n    const saveArticle = () => { //不用传值了，因为都已经用hooks获得了\r\n        // 是否选择了文章类型,文章标题\r\n        if (selectedType === '请选择类型') {\r\n            message.error('请选择文章类型');\r\n            return false //直接false,就不用存进数据库\r\n        } else if (!articleTitle) {\r\n            message.error('文章标题不能为空');\r\n            return false //直接false,就不用存进数据库\r\n        } else if (!articleContent) {\r\n            message.error('文章内容不能为空');\r\n            return false //直接false,就不用存进数据库\r\n        } else if (!introducemd) {\r\n            message.error('文章简介不能为空');\r\n            return false //直接false,就不用存进数据库\r\n        } else if (!showDate) {\r\n            message.error('发布日期不能为空');\r\n            return false //直接false,就不用存进数据库\r\n        }\r\n        // message.success('检验通过')\r\n        // 首先要声明一个局部的变量，相当于props参数，这里他是一个对象\r\n        // 注意，dataProps对象的名字，要跟数据库的字段一样比如title\r\n        let dataProps = {}\r\n        dataProps.type_id = selectedType; //article表的文章类型\r\n        dataProps.title = articleTitle;\r\n        dataProps.article_content = articleContent;\r\n        dataProps.introduce = introducemd; //文章简介\r\n        // 发布时间，因为这里我们传递过来的是一个字符串，如果直接传递的是时间就不用这步\r\n        // 把字符串变成文本的形式,\r\n        // 进行replace，把-换成/，变成一个可以转变的字符串\r\n        // let dataText = showDate.replace('-','/')\r\n        // dataProps.addTime = (new Date(dataText).getTime())/1000 //时间戳转换，处以以1000就是不需要到秒\r\n        // console.log(showDate);\r\n        dataProps.addTime = showDate;\r\n        // 能把selectType传过去，最后把dataProps用axios传到中台，然后中台就能获得了\r\n        // 然后要到接口中存数据\r\n        // 判断是增加还是修改,\r\n        if (articleId === 0) { //是0的话就是增加，如果是已经有了的,那就是修改（也就是接口那里做了一个返回的id)\r\n            // 说明是新增加\r\n            // 加一个访问时间//用来做文章访问次数的\r\n            dataProps.view_count = 0; //如果是修改，这里就不能为0，要获取原来的值然后赋值？？\r\n            axios({\r\n                method: 'post',\r\n                url: servicePath.addArticle,\r\n                data: dataProps,\r\n                withCredentials: true //还需要使用中间件路由守卫//让cookie起作用，可以跨域\r\n            }).then(\r\n                res => {\r\n                    // ？？？\r\n                    setArticleId(res.data.insertId) //这样再次保存的时候就是修改，不是新增了\r\n                    if (res.data.isSuccess) {\r\n                        message.success('发布成功')\r\n                    } else {\r\n                        message.error('发布失败')\r\n                    }\r\n                }\r\n            )\r\n        } else {\r\n            // 这里是修改\r\n            // 这里要传文章id，记得\r\n            dataProps.id = articleId //就是要修改哪条\r\n            // 然后就可以调用接口修改数据了\r\n            axios({\r\n                method: 'post',\r\n                url: servicePath.updataArticle,\r\n                data: dataProps,\r\n                withCredentials: true\r\n            }).then(\r\n                res => {\r\n                    if (res.data.isSuccess) {\r\n                        message.success('更新成功');\r\n                    } else {\r\n                        message.error('修改失败');\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n    // 通过id获取文章,主要是把修改时，要修改的内容显示出来\r\n    const getArticleById = (id) => {\r\n        axios(servicePath.getArticleById + id, { withCredentials: true }).then(\r\n            res => {\r\n                console.log(res.data.data[id - 1]);\r\n                let articleInfo = res.data.data[id - 1] //是一个数组 //这里注意\r\n                setArticleTitle(articleInfo.title);\r\n                setArticleContent(articleInfo.article_content);\r\n                // 对应的还要把预览地方的markdown放上去\r\n                let html = marked(articleInfo.article_content);\r\n                setMarkdownContent(html);\r\n                setIntroducemd(articleInfo.introduce);\r\n                let temInt = marked(articleInfo.introduce)\r\n                setIntroducehtml(temInt);\r\n                setShowDate(articleInfo.addTime);\r\n                setSelectType(articleInfo.typeId)\r\n            }\r\n        )\r\n    }\r\n    // 暂存文章\r\n    // const temSaveArticle = () => {\r\n    //     \r\n    // }\r\n\r\n    return (\r\n        // 页面分为两个部分文章内容和预览内容\r\n        <div>\r\n            {/* 间距gutter5个像素 */}\r\n            <Row gutter={5}>\r\n                {/* Col是24格布局 */}\r\n                {/* 左边 */}\r\n                <Col span={18}>\r\n                    <Row gutter={10}>\r\n                        {/* 最上面那一行 */}\r\n                        <Col span={20}>\r\n                            <Input\r\n                                // 然后要加上我们写的值，articleTitle，不写是不会发生变化的，\r\n                                value={articleTitle}\r\n                                placeholder=\"博客标题\"\r\n                                size=\"large\"\r\n                                onChange={e => { setArticleTitle(e.target.value) }}\r\n                            ></Input>\r\n                        </Col>\r\n                        {/* 类别选择*/}\r\n                        {/* defaultValue默认选哪个 */}\r\n                        {/* Option中的value要跟select对应 */}\r\n                        <Col span={4}>\r\n                            {/* 获取到接口的数据之后，放值 */}\r\n                            <Select defaultValue={selectedType} size=\"large\" onChange={selectTypeHandler}>\r\n                                {/* <Option value=\"1\">视频教程</Option> */}\r\n                                {\r\n                                    // 用map的形式循环\r\n                                    typeInfo.map((item, index) => {\r\n                                        return (\r\n                                            // 记住是有一个key值的\r\n                                            <Option key={index} value={item.id}>{item.typeName}</Option>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* 行里面列的间距 */}\r\n                    <Row gutter={10}>\r\n                        {/* 左右都是12，对半分 */}\r\n                        <Col span={12}>\r\n                            {/* 多行文本框，antd的组件 */}\r\n                            {/* rows:默认行数是35行，其实也就相当于默认的高 */}\r\n                            <TextArea\r\n                                className=\"markdown-content\"\r\n                                rows={35}\r\n                                placeholder=\"文章内容\"\r\n                                value={articleContent}\r\n                                onChange={changeContent}></TextArea>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <div className=\"show-html\"\r\n                                dangerouslySetInnerHTML={{ __html: markdownContent }}>\r\n                                {/* 记住这里不能直接写markdownContent，也就是html, 要用那个属性的方法*/}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                {/* 右边 */}\r\n                <Col span={6}>\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            {/* 用样式分开一点 */}\r\n                            <Button size=\"large\" >暂存文章</Button>\r\n                            {/* 主按钮：用于主行动点，一个操作区域只能有一个主按钮 */}\r\n                            <Button type=\"primary\" size=\"large\" onClick={saveArticle}>发布文章</Button>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            {/* 简介以后也是要用markdown转化为html */}\r\n                            <TextArea\r\n                                className=\"markdown-introduce\"\r\n                                rows={4}\r\n                                placeholder=\"文章简介\"\r\n                                value={introducemd}\r\n                                onChange={changeIntroduce}\r\n                            ></TextArea>\r\n                            {/* 预览 */}\r\n                            <div className=\"introduce-html\"\r\n                                dangerouslySetInnerHTML={{ __html: introducehtml }}>\r\n                                {/* introducehtml这个值是已经用marked转换了的 */}\r\n                            </div>\r\n                        </Col>\r\n                        {/* 发布日期 */}\r\n                        {/* 有一个自带的onChange方法，第二个参数，就是把我们的日期转化为String的 */}\r\n                        <Col span={12}>\r\n                            <div className=\"data-select\">\r\n                                <DatePicker\r\n                                    placeholder=\"发布日期\"\r\n                                    size=\"large\"\r\n                                    onChange={(data, dataString) => { setShowDate(dataString) }}></DatePicker>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddArticle;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { List, Row, Col, Modal, message, Button } from 'antd' //Modal模态窗口，就是删除的时候确定提示\r\nimport axios from 'axios' //需要跟中台接口进行交互\r\nimport servicePath from '../config/apiUrl'\r\nimport '../static/css/ArticleList.css'\r\nconst { confirm } = Modal //在Modal中，所以要解构一下\r\n\r\nfunction ArticleList(props) { //里面要传props，属性\r\n    const [list, setList] = useState([]) //是个数组\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []) //只进行一次渲染\r\n\r\n    // 获取数据\r\n    const getList = () => {\r\n        axios({\r\n            method: 'get',\r\n            url: servicePath.getArticleList,\r\n            withCredentials: true\r\n        }).then(\r\n            res => {\r\n                setList(res.data.list);\r\n            }\r\n        )\r\n    }\r\n    //删除文章的方法\r\n    const delArticle = (id) => {\r\n        // 确认框，也是有属性的\r\n        confirm({\r\n            title: '确定删除这篇博客吗？',\r\n            content: '如果你点击ok,文章将永远被删除，无法恢复!',\r\n            onOk() {\r\n                // 404错，路经写错了，记得传id过去\r\n                axios(servicePath.delArticle + id, { withCredentials: true }).then(res => {\r\n                    message.success('删除成功！'); //然后要重新获得列表\r\n                    getList();\r\n                })\r\n            },\r\n            onCancel() {\r\n                message.success('取消删除');\r\n            }\r\n        })\r\n    }\r\n    // 修改文章跳转的方法\r\n    const updateArticle = (id) => {\r\n        console.log(id)\r\n        axios({\r\n            method: 'get',\r\n            url: servicePath.getArticleById + id,\r\n            withCredentials: true\r\n        }).then(\r\n            (res) => {\r\n                if (res.data.isSuccess !== '') {\r\n                    props.history.push('/index/add/' + id) //跳转 //需要配置一下路由AdminIndex.js\r\n                } else {\r\n                    message.error('没有这个id')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            {/*属性 header：列表的头 */}\r\n            <List\r\n                header={\r\n                    // 接受对象，里面可以写JSX\r\n                    <Row className=\"list-div\">\r\n                        {/* 24格布局占用多少个 */}\r\n                        <Col span={8}>\r\n                            {/* 加粗 */}\r\n                            <b>标题</b>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <b>类别</b>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <b>发布时间</b>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <b>浏览量</b>\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            <b>操作</b>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                bordered //显示边框\r\n                dataSource={list}\r\n                renderItem={item => ( //如何渲染里面的每一项\r\n                    // 每一个子项\r\n                    <List.Item>\r\n                        <Row className=\"list-div\">\r\n                            {/* 24格布局占用多少个 */}\r\n                            <Col span={8}>\r\n                                {/* 加粗 */}\r\n                                {item.title}\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                {item.typeName}\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                {item.addTime}\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                {item.view_count}\r\n                            </Col>\r\n                            <Col span={4}>\r\n                                <Button type=\"primary\" onClick={() => { updateArticle(item.id) }}>修改</Button>&nbsp;\r\n                                {/* 记得把id传过去 */}\r\n                                <Button onClick={() => delArticle(item.id)} >删除</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticleList;\r\n","import { Layout, Menu, Breadcrumb } from 'antd';\r\nimport {\r\n\tDesktopOutlined,\r\n\tPieChartOutlined,\r\n\tFileOutlined,\r\n\tUserOutlined,\r\n} from '@ant-design/icons';\r\nimport React, { useState } from 'react'; //hooks组件要加\r\nimport '../static/css/AdminIndex.css';\r\nimport { Route } from 'react-router-dom'\r\nimport AddArticle from './AddArticle'\r\nimport ArticleList from './ArticleList'//文章列表\r\n\r\nconst { Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nfunction AdminIndex(props) {\r\n\t//改state\r\n\tconst [collapsed, setCollapsed] = useState(false) //控制左侧栏是否合上，设为false，打开\r\n\t//改set..\r\n\tconst onCollapse = collapsed => {\r\n\t\tsetCollapsed(collapsed)\r\n\t};\r\n\r\n\t// 点击文章管理\r\n\tconst handleClickArticle = e => { //传入一个e,因为这里需要用它的key\r\n\t\tif (e.key === 'addArticle') {\r\n\t\t\tprops.history.push('/index/add')\r\n\t\t} else {\r\n\t\t\tprops.history.push('/index/list')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Layout style={{ minHeight: '100vh' }}>\r\n\t\t\t{/* 改属性的值 不用加this.state,方法也不用加this了 */}\r\n\t\t\t<Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n\t\t\t\t<div className=\"logo\" />\r\n\t\t\t\t<Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n\t\t\t\t\t<Menu.Item key=\"1\" icon={<PieChartOutlined />}>\r\n\t\t\t\t\t\t工作台\r\n            </Menu.Item>\r\n\t\t\t\t\t<Menu.Item key=\"addArticle\" icon={<DesktopOutlined />} onClick={handleClickArticle}>\r\n\t\t\t\t\t\t添加文章\r\n            </Menu.Item>\r\n\t\t\t\t\t{/* 点击文章管理的时候 调动方法，根据传入的key值进行跳转 */}\r\n\t\t\t\t\t<SubMenu key=\"sub1\" onClick={handleClickArticle} icon={<UserOutlined />} title=\"文章管理\">\r\n\t\t\t\t\t\t{/* <Menu.Item key=\"3\">添加文章</Menu.Item>\r\n                        <Menu.Item key=\"4\">文章列表</Menu.Item> */}\r\n\t\t\t\t\t\t<Menu.Item key=\"addArticle\">添加文章</Menu.Item>\r\n\t\t\t\t\t\t<Menu.Item key=\"articleList\">文章列表</Menu.Item>\r\n\t\t\t\t\t</SubMenu>\r\n\t\t\t\t\t<Menu.Item key=\"9\" icon={<FileOutlined />} >\r\n\t\t\t\t\t\t留言管理\r\n          </Menu.Item>\r\n\t\t\t\t</Menu>\r\n\t\t\t</Sider>\r\n\t\t\t<Layout className=\"site-layout\">\r\n\t\t\t\t{/* <Header className=\"site-layout-background\" style={{ padding: 0 }} /> */}\r\n\t\t\t\t<Content style={{ margin: '0 16px' }}>\r\n\t\t\t\t\t{/* 面包屑导航 */}\r\n\t\t\t\t\t<Breadcrumb style={{ margin: '16px 0' }}>\r\n\t\t\t\t\t\t<Breadcrumb.Item>后台管理系统</Breadcrumb.Item>\r\n\t\t\t\t\t\t<Breadcrumb.Item>工作台</Breadcrumb.Item>\r\n\t\t\t\t\t</Breadcrumb>\r\n\t\t\t\t\t<div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{/* 因为是到这个页面就要显示AddArticle的内容，坐立Route中加一个exact精确匹配 */}\r\n\t\t\t\t\t\t\t{/* 意思就是路径是/index AddArticle这个组件就会显示 */}\r\n\t\t\t\t\t\t\t<Route path=\"/index/\" exact component={AddArticle} />\r\n\t\t\t\t\t\t\t{/*  要能跳转，加一个list */}\r\n\t\t\t\t\t\t\t<Route path=\"/index/add/\" exact component={AddArticle} />\r\n\t\t\t\t\t\t\t<Route path=\"/index/list/\" exact component={ArticleList} />\r\n\t\t\t\t\t\t\t<Route path=\"/index/add/:id\" exact component={AddArticle} />\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Content>\r\n\t\t\t\t<Footer style={{ textAlign: 'center' }}>jinghao.xyz</Footer>\r\n\t\t\t</Layout>\r\n\t\t</Layout>\r\n\t);\r\n}\r\n\r\n//不是用RenderDOM方式渲染，是直接暴露出去\r\n// ReactDOM.render(<SiderDemo />, mountNode);\r\nexport default AdminIndex;","import React from 'react'; //写组件必须要有的\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom' //引入路由\r\nimport Login from './Login' //要跳转的页面，引进来\r\nimport AdminIndex from './AdminIndex'\r\n\r\n//用hooks方法进行编写 无状态组件\r\nfunction Main() {\r\n\treturn (\r\n\t\t// Router的配置，作为外层标签 Router叫路由器，Route叫线路\r\n\t\t// 路由器需要给他一条线路指引\r\n\t\t<Router>\r\n\t\t\t{/* path是路经，访问什么能到这个页面 exact精确匹配这是真正实现跳转功能的部分，Link里面是相当于a标签 */}\r\n\t\t\t{/* 就是当访问这个路径的时候，把Login这个页面加载过去 */}\r\n\t\t\t<Route path=\"/\" exact component={Login} ></Route>\r\n\t\t\t<Route path=\"/index/\" component={AdminIndex} ></Route>\r\n\t\t\t{/* 或者删掉上面index的精确路由 */}\r\n\t\t\t{/* <Route path=\"/index/add\" exact component = {AdminIndex} ></Route> */}\r\n\t\t\t{/* <Route path=\"/index/list\" exact component = {AdminIndex} ></Route> */}\r\n\r\n\r\n\t\t</Router>\r\n\t)\r\n}\r\n\r\n// 记得暴露出去\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './Pages/Main';\r\n\r\nReactDOM.render(\r\n  <Main />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}